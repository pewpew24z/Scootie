console.log('üü¢ Login script loaded!');

// ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
document.addEventListener('DOMContentLoaded', function() {
    console.log('üü¢ DOM loaded!');
    
    const loginForm = document.getElementById('login-form');
    const errorMessage = document.getElementById('error-message');
    const btnText = document.getElementById('btn-text');
    const btnLoading = document.getElementById('btn-loading');

    if (!loginForm) {
        console.error('‚ùå Login form not found!');
        return;
    }

    console.log('üü¢ Login form found!');

    loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        console.log('üîµ Form submitted!');
        
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value.trim();
        
        console.log('üîµ Username:', username);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!username || !password) {
            showError('Please fill in all fields');
            return;
        }

        // ‡πÅ‡∏™‡∏î‡∏á loading
        if (btnText) btnText.style.display = 'none';
        if (btnLoading) btnLoading.style.display = 'inline';
        if (errorMessage) errorMessage.style.display = 'none';
        const submitBtn = loginForm.querySelector('button[type="submit"]');
        if (submitBtn) submitBtn.disabled = true;

        try {
            console.log('üîÑ Attempting to login...');
            
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API - ‡πÉ‡∏ä‡πâ relative path
            const apiUrl = 'API/get_tables.php';
            const fullUrl = window.location.origin + window.location.pathname.replace('login.html', '') + apiUrl;
            
            console.log('üîÑ Fetching from:', fullUrl);
            
            const response = await fetch(apiUrl);
            
            console.log('üîÑ Response status:', response.status);
            console.log('üîÑ Response ok:', response.ok);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            // ‡∏≠‡πà‡∏≤‡∏ô response ‡πÄ‡∏õ‡πá‡∏ô text ‡∏Å‡πà‡∏≠‡∏ô
            const responseText = await response.text();
            console.log('üîÑ Response length:', responseText.length);
            console.log('üîÑ Response preview:', responseText.substring(0, 100));
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (responseText.trim().startsWith('<?php') || responseText.trim().startsWith('<')) {
                console.error('‚ùå Server returned PHP/HTML instead of JSON');
                throw new Error('Server configuration error. PHP is not running properly.');
            }
            
            // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
            let data;
            try {
                data = JSON.parse(responseText);
                console.log('‚úÖ JSON parsed successfully');
            } catch (parseError) {
                console.error('‚ùå JSON Parse Error:', parseError);
                console.error('‚ùå Response was:', responseText.substring(0, 500));
                throw new Error('Server returned invalid JSON. Response: ' + responseText.substring(0, 100));
            }
            
            console.log('‚úÖ Data loaded:', Object.keys(data));
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Account ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö username
            const accountRow = data.account.rows.find(row => row[1] === username);
            
            console.log('üîç Found account:', accountRow ? 'Yes' : 'No');
            
            if (!accountRow) {
                throw new Error('Username not found');
            }
            
            console.log('‚úÖ Username found');
            console.log('üîç Account data:', accountRow);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö password
            console.log('üîç Checking password...');
            console.log('üîç Stored password:', accountRow[2]);
            
            if (accountRow[2] !== password) {
                throw new Error('Incorrect password');
            }
            
            console.log('‚úÖ Password correct');

            // Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const accountId = accountRow[0];
            const accountUsername = accountRow[1];
            const accountEmail = accountRow[3];
            
            console.log('‚úÖ Account ID:', accountId);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Employee ‡∏´‡∏£‡∏∑‡∏≠ Customer
            const employeeRow = data.employee.rows.find(row => row[1] == accountId);
            const customerRow = data.customer.rows.find(row => row[1] == accountId);
            
            console.log('üîç Employee found:', employeeRow ? 'Yes' : 'No');
            console.log('üîç Customer found:', customerRow ? 'Yes' : 'No');
            
            if (employeeRow) {
                // ‡πÄ‡∏õ‡πá‡∏ô Employee
                console.log('‚úÖ Login as Employee');
                console.log('‚úÖ Employee data:', employeeRow);

                try {
                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage
                    localStorage.setItem('userType', 'employee');
                    localStorage.setItem('userId', employeeRow[0]);
                    localStorage.setItem('accountId', accountId);
                    localStorage.setItem('username', accountUsername);
                    localStorage.setItem('email', accountEmail);
                    localStorage.setItem('name', employeeRow[3]);
                    
                    console.log('‚úÖ Data saved to localStorage');
                } catch (storageError) {
                    console.error('‚ö†Ô∏è localStorage error:', storageError);
                }
                
                console.log('‚úÖ Redirecting to employee_account.html...');
                
                // ‡πÅ‡∏™‡∏î‡∏á success message
                alert('Welcome back, ' + employeeRow[3] + '!');
                
                // Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Employee Account
                window.location.href = 'employee_account.html';
                
            } else if (customerRow) {
                // ‡πÄ‡∏õ‡πá‡∏ô Customer
                console.log('‚úÖ Login as Customer');
                console.log('‚úÖ Customer data:', customerRow);
                
                try {
                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage
                    localStorage.setItem('userType', 'customer');
                    localStorage.setItem('userId', customerRow[0]);
                    localStorage.setItem('accountId', accountId);
                    localStorage.setItem('username', accountUsername);
                    localStorage.setItem('email', accountEmail);
                    localStorage.setItem('name', customerRow[2]);

                    localStorage.setItem('customerName', customerRow[2]);
                    
                    console.log('‚úÖ Data saved to localStorage');
                } catch (storageError) {
                    console.error('‚ö†Ô∏è localStorage error:', storageError);
                }
                
                console.log('‚úÖ Redirecting to customer_account.html...');
                
                // ‡πÅ‡∏™‡∏î‡∏á success message
                alert('Welcome back, ' + customerRow[2] + '!');
                
                // Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Customer Account
                window.location.href = 'customer_account.html';
                
            } else {
                throw new Error('Account not associated with any user');
            }
            
        } catch (error) {
            console.error('‚ùå Login error:', error);
            console.error('‚ùå Error name:', error.name);
            console.error('‚ùå Error message:', error.message);
            console.error('‚ùå Error stack:', error.stack);
            
            // ‡πÅ‡∏™‡∏î‡∏á error message
            showError(error.message);

            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏∏‡πà‡∏°
            if (btnText) btnText.style.display = 'inline';
            if (btnLoading) btnLoading.style.display = 'none';
            if (submitBtn) submitBtn.disabled = false;
        }
    });

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á error
    function showError(message) {
        if (errorMessage) {
            errorMessage.textContent = '‚ùå ' + message;
            errorMessage.style.display = 'block';
        }
        console.error('‚ùå Error shown:', message);
    }
});